class AntHill{constructor(t,i,e){this.coordinate=new Coordinate(t,i,e)}render(){stroke(100),fill(222,184,135,255),ellipse(this.coordinate.position.x,this.coordinate.position.y,2*this.coordinate.radius,2*this.coordinate.radius)}}let environment,playerCodeAvailable=!1,playerCodeValid=!0,simulationEnd=!1,colonyNameUI,foodValueUI,deadAntsValueUI,killedBugsValueUI,pointsValue,showInfoMaxDuration=5,showInfoDuration=0,showInfoObject=null,showInfoPosition=null;function playerCodeLoaded(){playerCodeValid=!0;let t=PlayerInfo.fromObject(PLAYER_INFO);for(let i of t.castes){let t=i.speed+i.rotationSpeed+i.attack+i.load+i.range+i.viewRange+i.vitality;0!==t&&(console.error("Caste "+i.name+" abilities need to add up to zero! Got sum: "+t),playerCodeValid=!1)}playerCodeValid&&(SimSettings.displayDebugLabels=t.debug,environment=new Environment(t,0),playerCodeAvailable=!0,colonyNameUI.html(t.colonyName))}function setup(){frameRate(SimSettings.stepsPerSecond);let t=windowWidth<windowHeight?windowWidth:windowHeight;createCanvas(t-40,t-20).style("display","block"),colonyNameUI=select("#colonyName"),foodValueUI=select("#foodValue"),deadAntsValueUI=select("#deadAntsValue"),killedBugsValueUI=select("#killedBugsValue"),pointsValue=select("#pointsValue")}function windowResized(){resizeCanvas(windowWidth,windowWidth)}function draw(){if(angleMode(DEGREES),background(245,222,179),playerCodeValid)if(playerCodeAvailable){if(environment.currentRound<SimSettings.totalRounds?environment.step():simulationEnd=!0,environment.render(),frameCount%SimSettings.stepsPerSecond==0&&(foodValueUI.html(environment.playerColony.statistics.collectedFood.toString()),deadAntsValueUI.html(environment.playerColony.statistics.totalDeadAnts.toString()),killedBugsValueUI.html(environment.playerColony.statistics.killedBugs.toString()),pointsValue.html(environment.playerColony.statistics.points.toString())),mouseX>=0&&mouseX<=width&&mouseY>=0&&mouseY<=height){let t=new Coordinate(mouseX,mouseY,0),i=15,e=null,s=Number.MAX_SAFE_INTEGER;for(let n of environment.sugarHills){let a=Coordinate.distance(t,n.coordinate);n&&a<i&&a<s&&(s=a,e=n)}for(let n of environment.fruits){let a=Coordinate.distance(t,n.coordinate);n&&a<i&&a<s&&(s=a,e=n)}if(e)showInfoDuration=showInfoMaxDuration,showInfoObject=e,showInfoPosition=e.coordinate.position;else{for(let n=0;n<environment.bugs.insects.length;n++){let a=environment.bugs.insects[n],o=Coordinate.distance(t,a.coordinate);a&&o<i&&o<s&&(s=o,e=a)}for(let n=0;n<environment.playerColony.insects.length;n++){let a=environment.playerColony.insects[n],o=Coordinate.distance(t,a.coordinate);a&&o<i&&o<s&&(s=o,e=a)}e&&(showInfoDuration=showInfoMaxDuration,showInfoObject=e,showInfoPosition=e.coordinate.position)}}simulationEnd&&drawMessage("Simulation finished!","#fff"),SimSettings.displayDebugLabels&&(fill(20),textSize(12),text("FPS: "+Math.floor(frameRate()),10,20),text("Round: "+environment.currentRound,10,36)),showInfoDuration>0&&(showInfoDuration--,showInfoObject instanceof Sugar?drawInfo("Sugar","Amount: "+showInfoObject.amount.toString(),showInfoPosition):showInfoObject instanceof Fruit?drawInfo("Apple","Amount: "+showInfoObject.amount.toString(),showInfoPosition):showInfoObject instanceof BaseAnt?drawInfo("Ant "+showInfoObject.name,"Vitality: "+showInfoObject.vitality.toString(),showInfoPosition):showInfoObject instanceof Bug&&drawInfo("Bug","Vitality: "+showInfoObject.vitality.toString(),showInfoPosition))}else drawMessage("Loading...","#fff");else drawMessage("There are errors in your code. Please check the console.","#f00")}function drawMessage(t,i){noStroke(),fill(20,180),rect(0,0,width,height),textSize(24),fill(i),text(t,width/2-textWidth(t)/2,height/2-12)}function drawInfo(t,i,e){fill(20),textSize(12);let s=textWidth(t);text(t,e.x-s/2,e.y-32);let n=textWidth(i);text(i,e.x-n/2,e.y-16)}class Insect{constructor(){}init(t,i){this.colony=t,this.colour="#222",this.casteIndex=0,this.remainingDistance=0,this.remainingRotation=0,this.target=null,this.reached=!1,this.traveledDistance=0,this.vitality=this.maxVitality,this.currentSpeed=this.colony.castesSpeed[this.casteIndex],this.carriedFruit=null,this.currentLoad=0,this.debugMessage=null,this.smelledMarker=[],this.colonyCount=0,this.casteCount=0,this.colony.antHill?this.coordinate=new Coordinate(this.colony.antHill.coordinate.position.x,this.colony.antHill.coordinate.position.y,5):this.coordinate=new Coordinate(random(0,width),random(0,height),5),this.coordinate.direction=random(0,359)}get target(){return this.targetVal}set target(t){this.target===t&&null!==t||(this.targetVal=t)}get currentLoad(){return this.currentLoadVal}set currentLoad(t){this.currentLoadVal=t>=0?t:0,this.currentSpeed=this.colony.castesSpeed[this.casteIndex],this.currentSpeed-=this.currentSpeed*this.currentLoad/this.colony.castesLoad[this.casteIndex]/2}get maxLoad(){return this.colony.castesLoad[this.casteIndex]}get vitality(){return this.vitalityVal}set vitality(t){this.vitalityVal=t>=0?t:0}get maxSpeed(){return this.colony.castesSpeed[this.casteIndex]}get rotationSpeed(){return this.colony.castesRotationSpeed[this.casteIndex]}get range(){return this.colony.castesRange[this.casteIndex]}get viewRange(){return this.colony.castesViewRange[this.casteIndex]}get maxVitality(){return this.colony.castesVitality[this.casteIndex]}get attack(){return 0!==this.currentLoad?0:this.attackVal}set attack(t){this.attackVal=t>=0?t:0}get direction(){return this.coordinate.direction}get caste(){return this.colony.castes[this.casteIndex].name}get distanceToAntHill(){let t=Number.MAX_SAFE_INTEGER;if(this.colony.antHill){let i=Coordinate.distanceMidPoints(this.coordinate,this.colony.antHill.coordinate);i<t&&(t=i)}return t}get antsInViewRange(){return this.colonyCount}get antsFromSameCasteInViewRange(){return this.casteCount}get bugsInViewRange(){return this.bugCount}move(){if(0!==this.remainingRotation)Math.abs(this.remainingRotation)<this.rotationSpeed?(this.coordinate.direction+=this.remainingRotation,this.remainingRotation=0):this.remainingRotation>=this.rotationSpeed?(this.coordinate.direction+=this.rotationSpeed,this.remainingRotation=Coordinate.clampAngle(this.remainingRotation-this.rotationSpeed)):this.remainingRotation<=-this.rotationSpeed&&(this.coordinate.direction-=this.rotationSpeed,this.remainingRotation=Coordinate.clampAngle(this.remainingRotation+this.rotationSpeed));else if(this.remainingDistance>0){if(!this.carriedFruit){let t=Math.min(this.remainingDistance,this.currentSpeed);this.remainingDistance-=t,this.traveledDistance+=t,this.coordinate.position.x+=t*Math.cos(this.coordinate.direction*Math.PI/180),this.coordinate.position.y+=t*Math.sin(this.coordinate.direction*Math.PI/180)}}else if(null!==this.target){let t=Coordinate.distanceMidPoints(this.coordinate,this.target.coordinate);if(this.reached=t<=5,!this.reached){let i=Coordinate.directionAngle(this.coordinate,this.target.coordinate);t<this.viewRange||this.carriedFruit?this.remainingDistance=t:(i+=random(-10,10),this.remainingDistance=this.viewRange),this.turnToDirection(i)}}if(this.coordinate.position.x<0?(this.coordinate.position.x=-this.coordinate.position.x,this.coordinate.direction>90&&this.coordinate.direction<=180?this.coordinate.direction=180-this.coordinate.direction:this.coordinate.direction>180&&this.coordinate.direction<270&&(this.coordinate.direction=540-this.coordinate.direction)):this.coordinate.position.x>width&&(this.coordinate.position.x=width-this.coordinate.position.x,this.coordinate.direction>=0&&this.coordinate.direction<90?this.coordinate.direction=180-this.coordinate.direction:this.coordinate.direction>270&&this.coordinate.direction<360&&(this.coordinate.direction=540-this.coordinate.direction)),this.coordinate.position.y<0)this.coordinate.position.y=-this.coordinate.position.y,this.coordinate.direction=360-this.coordinate.direction;else{if(this.coordinate.position.y<=height)return;if(this.coordinate.position.y=height-this.coordinate.position.y,this.coordinate.direction<=0||this.coordinate.direction>=180)return;this.coordinate.direction=360-this.coordinate.direction}}render(){}goForward(t){t&&NaN!==Number(t)||(t=Number.MAX_SAFE_INTEGER),this.remainingDistance=t}goToTarget(t){this.target=t}goAwayFromTarget(t,i){this.turnToDirection(Coordinate.directionAngle(this.coordinate,t.coordinate)+180),this.goForward(i)}goHome(){this.goToTarget(this.colony.antHill)}stop(){this.target=null,this.remainingDistance=0,this.remainingRotation=0}turnByDegrees(t){this.remainingRotation=Coordinate.clampAngle(t)}turnToTarget(t){t&&t.coordinate&&(this.remainingRotation=Coordinate.clampAngle(Coordinate.directionAngle(this.coordinate,t.coordinate)-this.coordinate.direction))}turnToDirection(t){this.remainingRotation=Coordinate.clampAngle(t-this.coordinate.direction)}turnAround(){this.remainingRotation>0?this.remainingRotation=180:this.remainingRotation=-180}take(t){if(t instanceof Sugar){if(Coordinate.distanceMidPoints(this.coordinate,t.coordinate)<=5){let i=Math.min(this.maxLoad-this.currentLoad,t.amount);this.currentLoad+=i,t.amount-=i}}else if(t instanceof Fruit){if(this.carriedFruit===t)return;if(this.carriedFruit&&this.drop(),Coordinate.distanceMidPoints(this.coordinate,t.coordinate)>5)return;this.stop(),this.carriedFruit=t,t.carriers.push(this),this.currentLoad=this.maxLoad}}drop(){if(this.currentLoad=0,this.target=null,!this.carriedFruit)return;let t=this.carriedFruit.carriers.indexOf(this);t>-1&&this.carriedFruit.carriers.splice(t,1),this.carriedFruit=null}needsCarriers(t){return t.needsCarriers(this.colony)}attackTarget(t){this.target=t}setMarker(t,i){(!i||NaN===Number(i)||i<0)&&(i=0);let e=new Marker(this.coordinate.copy(),i);e.information=t,this.colony.newMarker.push(e),this.smelledMarker.push(e)}think(t){this.debugMessage=t?t.length>100?t.substr(0,100):t:null}}class BaseAnt extends Insect{init(t,i){super.init(t,i);let e=-1,s="";if(i){s=this.determineCaste(i);for(let i=0;i<t.castes.length;i++){let n=t.castes[i];if(n.name===s){e=i,this.colour=n.color||this.colour;break}}}e>-1?this.casteIndex=e:(t.castes[0].name&&console.error("Caste not exists: "+s+". Using default instead."),this.casteIndex=0),this.isTired=!1,this.name=random(SimSettings.antNames),this.vitality=t.castesVitality[this.casteIndex],this.currentSpeed=t.castesSpeed[this.casteIndex],this.attack=t.castesAttack[this.casteIndex]}determineCaste(t){return""}waits(){}spotsSugar(t){}spotsFruit(t){}spotsBug(t){}spotsFriend(t){}smellsFriend(t){}sugarReached(t){}fruitReached(t){}becomesTired(){}underAttack(t){}hasDied(t){}tick(){}render(){if(push(),translate(this.coordinate.position.x,this.coordinate.position.y),this.debugMessage){fill(20),textSize(12);let t=textWidth(this.debugMessage);text(this.debugMessage,-t/2,-14)}SimSettings.displayDebugLabels&&(noStroke(),fill(20,15),ellipse(0,0,2*this.viewRange)),rotate(this.coordinate.direction),noStroke(),fill(this.colour),rect(-3,-1.5,6,3),this.currentLoad>0&&!this.carriedFruit&&(fill(250),rect(-2.5,-2.5,5,5)),pop()}}class Bug extends Insect{init(t,i){super.init(t,i),this.coordinate.radius=6,this.vitality=t.castesVitality[0],this.currentSpeed=t.castesSpeed[0],this.attack=t.castesAttack[0],this.colour="blue"}render(){push(),translate(this.coordinate.position.x,this.coordinate.position.y),rotate(this.coordinate.direction),noStroke(),fill(this.colour),rect(-4,-2.5,8,5),pop()}}class CasteAbilityLevel{}class CasteAbilities{constructor(){this.offset=-1,this.abilities=[new CasteAbilityLevel,new CasteAbilityLevel,new CasteAbilityLevel,new CasteAbilityLevel],this.abilities[0].speed=2,this.abilities[0].rotationSpeed=4,this.abilities[0].load=4,this.abilities[0].range=1800,this.abilities[0].viewRange=20,this.abilities[0].vitality=50,this.abilities[0].attack=0,this.abilities[1].speed=3,this.abilities[1].rotationSpeed=8,this.abilities[1].load=5,this.abilities[1].range=2250,this.abilities[1].viewRange=40,this.abilities[1].vitality=100,this.abilities[1].attack=2,this.abilities[2].speed=4,this.abilities[2].rotationSpeed=16,this.abilities[2].load=7,this.abilities[2].range=3400,this.abilities[2].viewRange=80,this.abilities[2].vitality=175,this.abilities[2].attack=4,this.abilities[3].speed=5,this.abilities[3].rotationSpeed=24,this.abilities[3].load=10,this.abilities[3].range=4500,this.abilities[3].viewRange=120,this.abilities[3].vitality=250,this.abilities[3].attack=8}minIndex(){return this.offset}maxIndex(){return this.offset+this.abilities.length-1}get(t){return!Number.isSafeInteger(t)||t<this.offset||t>this.maxIndex()?(void 0!==t&&console.error("Caste ability level invalid! Got: "+t+". Allowed are: -1, 0, 1, 2"),this.abilities[0]):this.abilities[t-this.offset]}}class CasteInfo{constructor(){this.speed=0,this.rotationSpeed=0,this.load=0,this.range=0,this.viewRange=0,this.vitality=0,this.attack=0}static fromObject(t){let i=new CasteInfo;return i.name=t.name||"",i.color=t.color||null,i.speed=Number.isInteger(t.speed)?t.speed:0,i.rotationSpeed=Number.isInteger(t.rotationSpeed)?t.rotationSpeed:0,i.load=Number.isInteger(t.load)?t.load:0,i.range=Number.isInteger(t.range)?t.range:0,i.viewRange=Number.isInteger(t.viewRange)?t.viewRange:0,i.vitality=Number.isInteger(t.vitality)?t.vitality:0,i.attack=Number.isInteger(t.attack)?t.attack:0,i}}class Colony{constructor(t){if(this.insectDelay=0,this.insects=[],this.starvedInsects=[],this.eatenInsects=[],this.insectDelay=0,this.statistics=new PlayerStatistics,this.marker=[],this.newMarker=[],t){this.playerInfo=t,this.insectClass="PlayerAnt",this.castes=t.castes,0===this.castes.length&&this.castes.push(new CasteInfo),this.antsInCaste=this.castes.map(t=>0),this.castesSpeed=new Array(this.castes.length),this.castesRotationSpeed=new Array(this.castes.length),this.castesLoad=new Array(this.castes.length),this.castesRange=new Array(this.castes.length),this.castesViewRange=new Array(this.castes.length),this.castesVitality=new Array(this.castes.length),this.castesAttack=new Array(this.castes.length);let i=0;for(let t of this.castes)this.castesSpeed[i]=SimSettings.casteAbilities.get(t.speed).speed,this.castesRotationSpeed[i]=SimSettings.casteAbilities.get(t.rotationSpeed).rotationSpeed,this.castesLoad[i]=SimSettings.casteAbilities.get(t.load).load,this.castesRange[i]=SimSettings.casteAbilities.get(t.range).range,this.castesViewRange[i]=SimSettings.casteAbilities.get(t.viewRange).viewRange,this.castesVitality[i]=SimSettings.casteAbilities.get(t.vitality).vitality,this.castesAttack[i]=SimSettings.casteAbilities.get(t.attack).attack,i++}else this.playerInfo=null,this.insectClass="Bug",this.castesSpeed=[SimSettings.bugSpeed],this.castesRotationSpeed=[SimSettings.bugRotationSpeed],this.castesRange=[Number.MAX_SAFE_INTEGER],this.castesViewRange=[0],this.castesLoad=[0],this.castesVitality=[SimSettings.bugVitality],this.castesAttack=[SimSettings.bugAttack],this.antsInCaste=[0]}newInsect(){let availableInsects=null;if(this.castes&&this.castes.length>0){availableInsects={};let t=0;for(let i of this.castes)availableInsects.hasOwnProperty(i.name)||(availableInsects[i.name]=this.antsInCaste[t]),t++}let ant=eval(`new ${this.insectClass}()`);ant.init(this,availableInsects),this.insects.push(ant),this.antsInCaste[ant.casteIndex]++}removeAnt(t){let i=this.insects.indexOf(t);i>-1&&this.insects.splice(i,1),this.antsInCaste[t.casteIndex]--}render(){this.antHill&&this.antHill.render()}}class Coordinate{constructor(t,i,e){this.radius=e,this.direction=0,this.position=createVector(t,i)}static withDeltas(t,i,e){let s=new Coordinate(0,0,t.radius);return s.position.x=t.position.x+i,s.position.y=t.position.y+e,s.direction=t.direction,s}copy(){let t=new Coordinate(this.position.x,this.position.y,this.radius);return t.direction=this.direction,t}get direction(){return this.directionVal}set direction(t){for(this.directionVal=t;this.directionVal<0;)this.directionVal+=360;for(;this.directionVal>359;)this.directionVal-=360;this.directionVal=Math.floor(this.directionVal)}static distance(t,i){let e=t.position.dist(i.position)-t.radius-i.radius;return e=Math.floor(e),e<0?0:e}static distanceSqr(t,i){let e=t.position.copy().sub(i.position).magSq();return e<0?0:e}static distanceMidPoints(t,i){let e=t.position.dist(i.position);return e=Math.floor(e),e}static distanceMidPointsSqr(t,i){let e=t.position.copy().sub(i.position).magSq();return e<0?0:e}static directionAngle(t,i){let e=p5.Vector.sub(i.position,t.position).heading();return e<0&&(e+=360),Math.floor(e)}static clampAngle(t){for(;t>180;)t-=360;for(;t<-180;)t+=360;return t}}class Environment{constructor(t,i){0!==i&&randomSeed(i),this.sugarHills=[],this.fruits=[],this.playerColony=new Colony(t),this.playerColony.antHill=new AntHill(width/2,height/2,SimSettings.antHillRadius),this.bugs=new Colony,this.sugarDelay=0,this.fruitDelay=0,this.bugDelay=0,this.currentRound=0}step(){this.currentRound++,this.removeSugar(),this.spawnSugar(),this.spawnFruit();for(let t=0;t<this.bugs.insects.length;t++){let i=this.bugs.insects[t],e=this.getAntsInBattleRange(i);if(e.length>0){let t=SimSettings.bugAttack/e.length;for(let s of e)s.vitality-=t,s.underAttack(i),s.vitality<=0&&s.colony.eatenInsects.push(s)}i.move(),0===i.remainingDistance&&(i.turnToDirection(random(0,360)),i.goForward(random(160,320)))}for(let t=0;t<this.playerColony.insects.length;t++){let i=this.playerColony.insects[t],e=this.getAntsInViewRange(i);i.colonyCount=e[0],i.casteCount=e[1];let s=e[2],n=this.getBugsInViewRange(i);i.bugCount=n[0];let a=n[1];if(i.move(),i.traveledDistance>i.range)i.vitality=0,this.playerColony.starvedInsects.push(i);else{if(i.traveledDistance>i.range/3&&!i.isTired&&(i.isTired=!0,i.becomesTired()),!a||i.target instanceof Bug||i.spotsBug(a),!s||i.target instanceof BaseAnt||i.spotsFriend(s),i.target instanceof Bug){let t=i.target;t.vitality>0?Coordinate.distance(i.coordinate,i.target.coordinate)<SimSettings.battleRange&&(t.vitality-=i.attack,t.vitality<=0&&(this.bugs.eatenInsects.push(t),this.playerColony.statistics.killedBugs++,i.stop())):i.target=null}i.reached&&this.antAndTarget(i),this.antAndSugar(i),i.carriedFruit||this.antAndFruit(i),this.antAndMarker(i),i.target||0!==i.remainingDistance||i.waits(),i.tick()}}this.removeAnts(),this.spawnAnt(),this.updateMarker(),this.moveFruitAndAnts(),this.removeFruit(),this.removeBugs(),this.healBugs(),this.spawnBug()}render(){for(let t of this.playerColony.insects)t.render();for(let t of this.bugs.insects)t.render();for(let t of this.sugarHills)t.render();for(let t of this.fruits)t.render();for(let t of this.playerColony.marker)t.render();this.playerColony.render()}spawnAnt(){this.playerColony.insects.length<SimSettings.antLimit&&this.playerColony.insectDelay<0&&(this.playerColony.newInsect(),this.playerColony.insectDelay=SimSettings.antRespawnDelay),this.playerColony.insectDelay--}removeAnts(){let t=[];for(let i=0;i<this.playerColony.starvedInsects.length;i++){let e=this.playerColony.starvedInsects[i];e&&-1===t.indexOf(e)&&(t.push(e),this.playerColony.statistics.starvedAnts++,e.hasDied("starved"))}for(let i=0;i<this.playerColony.eatenInsects.length;i++){let e=this.playerColony.eatenInsects[i];e&&-1===t.indexOf(e)&&(t.push(e),this.playerColony.statistics.eatenAnts++,e.hasDied("eaten"))}for(let i of t)if(i){this.playerColony.removeAnt(i);for(let t of this.fruits){let e=t.carriers.indexOf(i);e>-1&&t.carriers.splice(e,1)}}this.playerColony.starvedInsects=[],this.playerColony.eatenInsects=[]}antAndTarget(t){if(t.target instanceof AntHill){if(t.carriedFruit)return;t.traveledDistance=0,t.target=null,t.smelledMarker=[],t.colony.statistics.collectedFood+=t.currentLoad,t.currentLoad=0,t.vitality=t.maxVitality,t.isTired=!1}else if(t.target instanceof Sugar){let i=t.target;if(t.target=null,i.amount<=0)return;t.sugarReached(i)}else if(t.target instanceof Fruit){let i=t.target;if(t.target=null,i.amount<=0)return;t.fruitReached(i)}else{if(t.target instanceof Bug)return;t.target=null}}antAndSugar(t){for(let i of this.sugarHills){let e=Coordinate.distance(t.coordinate,i.coordinate);t.target!==i&&e<=t.viewRange&&t.spotsSugar(i)}}antAndFruit(t){for(let i of this.fruits){let e=Coordinate.distance(t.coordinate,i.coordinate);t.target!==i&&e<=t.viewRange&&t.spotsFruit(i)}}antAndMarker(t){let i=this.getNearestMarker(t);i&&(t.smellsFriend(i),t.smelledMarker.push(i))}updateMarker(){let t=[];for(let i of this.playerColony.marker)i.isActive?i.update():t.push(i);for(let i of t){for(let t of this.playerColony.insects)if(t){let e=t.smelledMarker.indexOf(i);e>-1&&t.smelledMarker.splice(e,1)}this.playerColony.marker.splice(this.playerColony.marker.indexOf(i),1)}t=[];for(let t of this.playerColony.newMarker){let i=!1;for(let e of this.playerColony.marker)if(Coordinate.distanceMidPoints(e.coordinate,t.coordinate)<SimSettings.markerDistance){i=!0;break}i||this.playerColony.marker.push(t)}this.playerColony.newMarker=[]}moveFruitAndAnts(){for(let t of this.fruits){if(t.carriers.length<=0)continue;let i=0,e=0,s=0;for(let n of t.carriers)n.target!==t&&0===n.remainingRotation&&(i+=n.currentSpeed*Math.cos(n.coordinate.direction*Math.PI/180),e+=n.currentSpeed*Math.sin(n.coordinate.direction*Math.PI/180),s+=n.currentLoad);s=Math.min(Math.floor(0+s*SimSettings.fruitLoadMultiplier),t.amount),i=i*s/t.amount/t.carriers.length,e=e*s/t.amount/t.carriers.length,t.coordinate=Coordinate.withDeltas(t.coordinate,i,e);for(let s of t.carriers)s.coordinate=Coordinate.withDeltas(s.coordinate,i,e)}}spawnSugar(){if(this.sugarHills.length<SimSettings.sugarLimit&&this.sugarDelay<=0){this.sugarDelay=SimSettings.sugarRespawnDelay;let t=this.getRandomPoint(),i=random(SimSettings.minSugarAmount,SimSettings.maxSugarAmount);this.sugarHills.push(new Sugar(t.x,t.y,i))}this.sugarDelay--}removeSugar(){this.sugarHills=this.sugarHills.filter(t=>t&&t.amount>0)}spawnFruit(){if(this.fruits.length<SimSettings.fruitLimit&&this.fruitDelay<=0){this.fruitDelay=SimSettings.fruitRespawnDelay;let t=this.getRandomPoint(),i=random(SimSettings.minFruitAmount,SimSettings.maxFruitAmount);this.fruits.push(new Fruit(t.x,t.y,i))}this.fruitDelay--}removeFruit(){for(let t of this.fruits)if(Coordinate.distanceMidPoints(t.coordinate,this.playerColony.antHill.coordinate)<=5){this.playerColony.statistics.collectedFood+=t.amount,t.amount=0;for(let i of t.carriers)i&&(i.carriedFruit=null,i.currentLoad=0,i.remainingDistance=0,i.remainingRotation=0,i.goHome());t.carriers=[]}this.fruits=this.fruits.filter(t=>t&&t.amount>0)}spawnBug(){this.bugs.insects.length<SimSettings.bugLimit&&this.bugs.insectDelay<0&&(this.bugs.newInsect(),this.bugs.insectDelay=SimSettings.bugRespawnDelay),this.bugs.insectDelay--}healBugs(){if(this.currentRound%SimSettings.bugRegenerationDelay==0)for(let t of this.bugs.insects)t&&t.vitality<t.maxVitality&&(t.vitality+=SimSettings.bugRegenerationValue)}removeBugs(){for(let t=this.bugs.eatenInsects.length-1;t>=0;t--){let i=this.bugs.eatenInsects[t];if(i){let t=this.bugs.insects.indexOf(i);t>-1&&this.bugs.insects.splice(t,1)}}this.bugs.eatenInsects=[]}getBugsInViewRange(t){let i=0,e=null,s=Number.MAX_SAFE_INTEGER;for(let n of this.bugs.insects){if(n===t)continue;let a=Coordinate.distanceSqr(t.coordinate,n.coordinate);a<=t.viewRange*t.viewRange&&(a<s&&(s=a,e=n),i++)}return[i,e]}getAntsInViewRange(t){let i=0,e=0,s=null,n=Number.MAX_SAFE_INTEGER;for(let a of this.playerColony.insects){if(a===t)continue;let o=Coordinate.distanceSqr(t.coordinate,a.coordinate);o<=t.viewRange*t.viewRange&&(o<n&&(n=o,s=a),i++,a.casteIndex===t.casteIndex&&e++)}return[i,e,s]}getAntsInBattleRange(t){let i=[];for(let e of this.playerColony.insects){let s=e;s!==t&&(Coordinate.distanceSqr(t.coordinate,s.coordinate)<=SimSettings.battleRange*SimSettings.battleRange&&i.push(s))}return i}getNearestMarker(t){let i=null,e=Number.MAX_SAFE_INTEGER;for(let s of this.playerColony.marker){let n=Coordinate.distanceMidPoints(t.coordinate,s.coordinate);n-t.coordinate.radius-s.coordinate.radius<=0&&n<e&&-1===t.smelledMarker.indexOf(s)&&(e=n,i=s)}return i}getRandomPoint(){let t=createVector(random(20,width-20),random(20,height-20));for(;t.dist(this.playerColony.antHill.coordinate.position)<25;)t=createVector(random(20,width-20),random(20,height-20));return t}}class Food{constructor(t,i,e){this.coordinate=new Coordinate(t,i,0),this.amount=e}get amount(){return this.amountVal}set amount(t){this.amountVal=t,this.coordinate.radius=Math.floor(Math.round(Math.sqrt(this.amount/Math.PI)*SimSettings.sugarRadiusMultiplier))}}class Fruit extends Food{constructor(t,i,e){super(t,i,e),this.carriers=[]}get amount(){return this.amountVal}set amount(t){this.amountVal=t,this.coordinate.radius=Math.floor(SimSettings.fruitRadiusMultiplier*Math.sqrt(this.amount/Math.PI))}needsCarriers(t){let i=0;for(let e of this.carriers)e.colony===t&&(i+=e.currentLoad);return i*SimSettings.fruitLoadMultiplier<this.amount}render(){if(stroke(100),fill(10,230,10),ellipse(this.coordinate.position.x,this.coordinate.position.y,2*this.coordinate.radius),SimSettings.displayDebugLabels&&this.carriers.length>0){fill(20),textSize(12);let t=textWidth(this.carriers.length.toString());text(this.carriers.length.toString(),this.coordinate.position.x-t/2,this.coordinate.position.y-14)}}}class Marker{constructor(t,i){this.age=0,this.coordinate=t,this.maxAge=SimSettings.markerMaximumAge,i<0?i=0:(i>SimSettings.markerRangeMaximum&&(i=SimSettings.markerRangeMaximum),this.maxAge=this.maxAge*SimSettings.markerSizeMinimum/(SimSettings.markerSizeMinimum+i)),this.spread=i,this.update()}get isActive(){return this.age<this.maxAge}update(){this.age++,this.coordinate.radius=SimSettings.markerSizeMinimum,this.coordinate.radius+=this.spread*this.age/this.maxAge}render(){noStroke(),fill(240,240,10,map(this.age,0,this.maxAge,128,0)),ellipse(this.coordinate.position.x,this.coordinate.position.y,2*this.coordinate.radius)}}class PlayerInfo{static fromObject(t){let i=new PlayerInfo;if(i.name=t.name,i.colonyName=t.colonyName,i.castes=[],Array.isArray(t.castes))for(let e of t.castes)i.castes.push(CasteInfo.fromObject(e));return i.debug=t.debug||!1,i}}class PlayerStatistics{constructor(){this.starvedAnts=0,this.eatenAnts=0,this.collectedFood=0,this.killedBugs=0}get points(){return Math.max(Math.floor(SimSettings.pointsForFood*this.collectedFood+SimSettings.pointsForStarvedAnts*this.starvedAnts+SimSettings.pointsForEatenAnts*this.eatenAnts+SimSettings.pointsForKilledBugs*this.killedBugs),0)}get totalDeadAnts(){return this.starvedAnts+this.eatenAnts}}class SimSettings{static get markerSizeMaximum(){return this.markerSizeMinimum*this.markerMaximumAge}static get markerRangeMaximum(){return this.markerSizeMaximum-this.markerSizeMinimum}}SimSettings.stepsPerSecond=30,SimSettings.totalRounds=7300,SimSettings.antLimit=50,SimSettings.antHillRadius=25,SimSettings.displayDebugLabels=!1,SimSettings.sugarLimit=2,SimSettings.fruitLimit=2,SimSettings.bugLimit=5,SimSettings.minSugarAmount=500,SimSettings.maxSugarAmount=500,SimSettings.minFruitAmount=250,SimSettings.maxFruitAmount=250,SimSettings.sugarRadiusMultiplier=1,SimSettings.fruitLoadMultiplier=5,SimSettings.fruitRadiusMultiplier=1.25,SimSettings.pointsForFood=1,SimSettings.pointsForStarvedAnts=-5,SimSettings.pointsForEatenAnts=0,SimSettings.pointsForKilledBugs=150,SimSettings.antRespawnDelay=15,SimSettings.bugRespawnDelay=75,SimSettings.sugarRespawnDelay=150,SimSettings.fruitRespawnDelay=225,SimSettings.bugSpeed=2,SimSettings.bugRotationSpeed=5,SimSettings.bugVitality=1e3,SimSettings.bugAttack=50,SimSettings.bugRegenerationDelay=5,SimSettings.bugRegenerationValue=1,SimSettings.battleRange=10,SimSettings.casteAbilities=new CasteAbilities,SimSettings.antNames=["Anke","Matthias","Roland","Bernhard","Werner","Joachim","Gabi","Björn","Anja","Carsten","Benjamin","Timon","Yannik","Matthias LT","Jens","Dennis","Christine","Sebastian","Seddy","Tim","Manuel"],SimSettings.markerMaximumAge=150,SimSettings.markerSizeMinimum=20,SimSettings.markerDistance=13;class Sugar extends Food{constructor(t,i,e){super(t,i,e)}render(){stroke(100),fill(250),ellipse(this.coordinate.position.x,this.coordinate.position.y,2*this.coordinate.radius)}}
